
Lab1 - hello world  100/100


#!/bin/bash
#Erika Hernandez
#Lab1- Hello World
#CS 3030 - Scripting Languages

echo "Hello, World!"


lab 2 -- search and report 200/200


#!/bin/bash 
#Erika Hernandez
#CS 3030- Scripting Languages 
#Lab2 

patharg=$1

#argument was set --check 
if [ $# -eq 0 ]; then
    echo "Usage: srpt PATH"
    exit 1
fi 

#making temp directory 
mkdir -p /tmp/$USER

#copy and paste 
directory_count=/tmp/$USER/direcotrycount 
file_count=/tmp/$USER/filecount
symlink_count=/tmp/$USER/symlinkcount
oldfiles_count=/tmp/$USER/oldfilescount 
largefiles_count=/tmp/$USER/largefiles
graphicfiles_count=/tmp/$USER/graphicfilescount
tempfiles_count=/tmp/$USER/tempfilescount
execfiles_count=/tmp/$USER/execfilescount
totalfilesize=/tmp/$USER/totalfilesize


#my only find command allowed 
find $patharg ! -path $patharg \( -type d -fprintf $directory_count "\n" \) , \( -type f -fprintf $file_count "\n" \) , \( -type l -fprintf $symlink_count "\n" \) , \( -type f -mtime +365 -fprintf $oldfiles_count "\n" \) ,  \( -type f -size +500000c -fprintf $largefiles_count "%s\n" \) , \( -type f \( -iname "*.jpg" -o -iname "*.gif" -o -iname "*.bmp" \) -fprintf $graphicfiles_count "\n" \) ,  \( -type f -iname "*.o" -fprintf $tempfiles_count "\n" \) ,  \( -type f -executable -fprintf $execfiles_count "\n" \) , \( -type f -size +0c -fprintf $totalfilesize "%s\n" \)


#formatting 
directory_count=$(wc -l $directory_count | cut -d " " -f 1)
file_count=$(wc -l $file_count | cut -d " " -f 1) 
symlink_count=$(wc -l $symlink_count | cut -d " " -f 1)
oldfiles_count=$(wc -l $oldfiles_count | cut -d " " -f 1)
largefiles_count=$(wc -l $largefiles_count | cut -d " " -f 1)
graphicfiles_count=$(wc -l $graphicfiles_count | cut -d " " -f 1)
tempfiles_count=$(wc -l $tempfiles_count | cut -d " " -f 1)
execfiles_count=$(wc -l $execfiles_count | cut -d " " -f 1)

awktotalfilesize=$(awk '{total=total+$1} END {print total}' "$totalfilesize")


#output

echo SearchReport $(hostname) $patharg $(date)
echo " "
echo Execution time $SECONDS 
echo Directories $(printf "%'d\n" $directory_count)
echo Files $(printf "%'d\n" $file_count)
echo Sym links $(printf "%'d\n" $symlink_count)
echo Old files $(printf "%'d\n" $oldfiles_count)
echo Large files $(printf "%'d\n" $largefiles_count)
echo Graphics files $(printf "%'d\n" $graphicfiles_count)
echo Temporary files $(printf "%'d\n" $tempfiles_count)
echo Executable files $(printf "%'d\n" $execfiles_count)
echo TotalFileSize $(printf "%'d\n" $awktotalfilesize)



#temp direct 
rm -r /tmp/$USER

exit 0 







Lab 3 - Failed login Report 200/200


#!/bin/bash
#Erika Hernandez
#Lab 3 - Failed Login Report 
#CS 3030 - Scripting Languages 


if [ $# -ne 1 ]
then
        echo "Usage: srpt $PWD "
exit 1
fi

grep 'Failed password for ' $@ > s1out
sed -n 's/.*Failed password for \([a-z0-9A-Z_]*\) .*/\1/p' s1out >s2out
sort <s2out >s3out
uniq -c <s3out >s4out
sort -k1,1nr -k2,2 s4out >s5out
sed 's/invalid/\&lt;UNKNOWN\&gt;/' <s5out >s6out



printf "<html>\n<body><h1>Failed Login Attempts Report as of $(date)</h1>\n"
cat s6out| while read mycount myuserid; do
               printf "<br /> %'d %s\n" "$mycount" "$myuserid"
done
printf "</body> </html>"



lab 4 - Temperature Converter 100/100


#!/usr/bin/python3
#Erika Hernandez
#Lab 4 - Temp 
#CS 3030 - SCripting Languages 

# Function to convert Fahrenheit to Celsius
def fahrenheitToCelsius(fahrenheit):
# Formula to convert into Celsius
    celsius = round((fahrenheit - 32) * 5/9, 1)
    return celsius

# Function to convert Celsius to Fahrenheit
def celsiusToFahrenheit(celsius):
# Formula to convert into Fahrenheit
    fahrenheit = round((celsius * 9/5 + 32), 1)
    return fahrenheit

#main
print("Welcome to the CS 3030 Temperature Conversion Program\n")

while(1) :
    print ("Main Menu")
    print () 
    print ("1:Fahrenheit to Celsius")
    print ("2:Celsius to Fahrenheit")
    print ("3:Exit Program")
    print ()
    print ("Please enter 1, 2 or 3:")
    user_input = input()
    if user_input == "1" : #This needs to be tested as a string - input comes in as string literals
        try:
            fahrenheit = float(input("Please enter degrees Celsius:"))
        except:
            print("Invalid entry")
            continue
        y = fahrenheitToCelsius(fahrenheit)
        print("%s degrees in Fahrenheit equals %s degrees in Celsius" % (fahrenheit, y))
    elif user_input == "2" :
        try:
            celsius = float(input("Please enter degrees Celsius:"))
        except:
            print("Invalid entry")
            continue
        y = celsiusToFahrenheit(celsius)
        print("%s degrees in Celsius equals %s degrees in Fahrenheit" % (celsius, y))
    elif user_input == "3" :
        exit (0)





Lab 5 Database loader 300/300 

#!/usr/bin/python3
#Erika Hernandez
#Lab 5 - Database Loader 
#CS 3030 - Scripting Languages 
#vi dbload is the name of the file 
#to run code use this 
# ./dbload studentregs.csv test.db 

import sqlite3
import csv
import sys
import random
import os

#Check for correct usage
if len(sys.argv) != 3:
   print ("Usage:./dbload INPUTCSV OUTPUTDB")
   exit(1)

inputcsv = sys.argv[1]
outputdb = sys.argv[2]

#Open CSV file using try/except 
#print exception and exit(1) if error

try:
   open(inputcsv, 'r')

except:
   print("Error")
   exit(1)

#Open the database using try/except 
#print exception and exit(1) if error

try:
   dbcr = sqlite3.connect(outputdb)
   curs = dbcr.cursor()

   curs.execute('''drop table if exists classes''')
   curs.execute('''create table classes (id text, subjcode text, coursenumber text, termcode text)''')
   curs.execute('''drop table if exists students''')
   curs.execute('''create table students (id text primary key unique, firstname text, lastname text, email text, major text, city text, state text, zip text)''')

except:
   print("Error")
   exit(1)

#In the CSV file add to students and classes tables
reader = csv.reader(open(inputcsv, 'r'), delimiter=',', quotechar='"')
counter = 0

for row in reader:

   counter += 1
   #skip over the header
   if counter == 1:
       continue

   #split into subjcode and coursenumber
   s = row[5].split(" ")
   r1 = (row[0], row[1], row[2], row[3], row[4], row[7], row[8],row[9])
   r2 = (row[0], s[0], s[1], row[6])

   #check if student exists in the students table already 
   #then insert if not

   curs.execute("select * from students where id = '{0}'".format(row[0]))
   if not curs.fetchone():
       curs.execute('''insert into students(id, firstname, lastname, email, major, city, state, zip) values (?,?,?,?,?,?,?,?)''',r1)
   curs.execute('''insert into classes (id, subjcode, coursenumber, termcode) values (?,?,?,?)''',r2)


dbcr.commit()
exit(0)






Lab 6 -- Filemaker -- 230/300

#!/usr/bin/python3
#Erika Hernandez 
#Lab 6 - filemaker 
#CS 3030 - Scripting Languages 

import sys
import random
import shlex

#checking parameter

if len(sys.argv) != 4:
    print("Usage: ./filemaker INPUTCOMMANDFILE OUTPUTFILE RECORDCOUNT")
    exit(1)

#parameters that are used in usable variables
input_file = sys.argv[1]
output_file = sys.argv[2]
records_count = sys.argv[3]

try:
    records_count = int(records_count)
except:
    print("Error")
    exit(1)

try:
    inputFile = open(input_file, 'r')
except:
    print("Error with opening input file")
    exit(1)

try:
    outputFile = open(output_file, 'w')
except:
    print("Error with opening output file")
    exit(1)

#slurping the commands and putting into command list

command_list = inputFile.readlines()
header = shlex.split(command_list[0])
#declaring the dictionary
randomFiles = {}

if header[0] == "HEADER":
    outputFile.write(header[1])
for i in range(len(command_list)):
    cmd = shlex.split(command_list[i])
if cmd[0] == "FILEWORD":
    inFile = open(cmd[2], 'r')
    randomFiles[cmd[2]] = inFile.readlines()
    inFile.close()

#this is printing the random Files

random_data = {}

for i in range(records_count):
    random_data = {}
    for command in range(len(command_list)):
        cmd = shlex.split(command_list[command])
        if cmd[0] == "STRING":
            cmd[1].encode()
            outputFile.write(cmd[1])
        if cmd[0] == "FILEWORD":
            label = cmd[1]
            if label in random_data:
                print("Error: Key exists")
                exit(1)
            else:
                rand_word = randomFiles[cmd[2]][random.randint(0, len(randomFiles[cmd[2]]) - 1)]
                random_word = random_word.rstrip()
                random_word[cmd[1]] = random_word
                outputFile.write(random_data[cmd[1]])
        if cmd[0] == "NUMBER":
            label = cmd[1]
            min_number = int(cmd[2])
            max_number = int(cmd[3])
            if label in random_data:
                print("Error: Key exists")
                exit(1)
            else:
                randNum = random.randint(min_number, max_number)
                random_data[cmd[1]] = str(randNum)
                outputFile.write(random_data[cmd[1]])
        if cmd[0] == "REFER":
            label = cmd[1]
            outputFile.write(random_data[label])
exit(0)

    



--- Lab 7 Powershell Search and report 190/200---


#!/usr/bin/env pwsh
#Erika Hernandez
#Lab 7 - PowerShell Search and Report 
#CS 3030 - Scripting Languages 

#if that gets the cout from the sprt 
if ($args.count -ne 1) {
    Write-Host "Usage: srpt.ps1 <PATH>"
    exit (1)
}

$path = $args[0]

# Variable Storage
#and this does the lay out as well 
$startTime = (GET-DATE)
$files = Get-ChildItem -Path $path -recurse
$numFiles = 0
$numDirectories = 0
$numSymlinks = 0
$numOldFiles = 0
$numLarge = 0
$numGraphic = 0
$numExecutable = 0
$numTemp = 0
$totalSize = $totalSize + 1 

#for with the files and the file path name 
foreach ($file in ($files)) {
    $filepath = $file.FullName

    $len = (Get-Item -Path $filePath).Length


    # directory Count
    if( ((Get-Item -Path $filepath) -is [System.IO.DirectoryInfo] )) {
        $numDirectories = $numDirectories + 1
    }

    # symbolic Links
    elseif ((Get-Item -Path $filepath).LinkType -eq "SymbolicLink") {
        $numSymlinks = $numSymlinks +1
    }

    else {
        $numFiles = $numFiles +1

        $totalSize + $totalSize + 1

        #this is the  Graphics
        if (($filePath -like "*.jpg") -or ($filepath -like "*.gif") -or ($filepath -like "*.bmp")) {
            $numGraphic = $numGraphic +1
        }

        #this is the executables
        if (($filepath -Like "*.bat") -or ($filepath -Like "*.ps1") -or ($filepath -Like "*.exe")) {
            $numExecutable = $numExecutable + 1
        }

        # this is for temp files
        if ($filepath -Like "*.o") {
            $numTemp = $numTemp + 1
        }

    }

    # the large files 
    if ($len -gt 500000) {
        $numLarge = $numLarge + 1
    }

    $fileCreated = (Get-Item -Path $filepath).CreationTime

    #this is the old files 
    if (($startTime - $fileCreated).Days -gt 365) {
        $numOldFiles = $numOldFiles + 1
    }
}

#prints out the time the way he wants it to look 
#did the dates in bash mode and hostname 
#if you print hostname in bash it will give you the info 
#same with the date 
$todaysDate = &date
$hostname = &hostname


#this gets me the date 
$endTime = (Get-Date)
$executionTime = ($endTime - $startTime)


#the list of the print outs 
#N0 puths the commas in for the numbers
#so it looks like this 1,000,000 instead of 10000000 easier to read  
Write-Host "SearchReport" $hostname $path $todaysDate
Write-Host "ExecutionTime" $executionTime.ToString('N0')
Write-Host "Directories" $numDirectories.ToString('N0')
Write-Host "Files" $numFiles.ToString('N0')
Write-Host "Sym links" $numSymlinks.ToString('N0')
Write-Host "Old files" $numOldFiles.ToString('N0')
Write-Host "Large files" $numLarge.ToString('N0')
Write-Host "Graphics files" $numGraphic.ToString('N0')
Write-Host "Temporary files" $numTemp.ToString('N0')
Write-Host "Executable files" $numExecutable.ToString('N0')
Write-Host "TotalFileSize" $totalSize.ToString('N0')

exit (0)


---lab 8 Powershell Database 200/300 ----


#!/usr/bin/env pwsh
#Erika Hernandez
#Lab 8 - PowerShell Database Loader 
#CS 3030 - Scripting Languages 


#open the csv file
try {
    $csv = import-csv $args[0] -delimiter ","
}
catch {
    write-output ("Error opening CSV file: $_")
    exit (1)
}

#open database file
try {
   Add-Type -Path "dlls/System.Data.SQLite.dll"
   $con = New-Object -TypeName System.Data.SQLite.SQLiteConnection
   $con.ConnectionString = "Data Source=$($args[1])"
   $con.Open()
}
   catch {
   write-output("Error opening database file: $_") 
   exit (1)
}

$transaction = $con.BeginTransaction("create")

$sql = $con.CreateCommand()
$sql.CommandText = 'DROP table if exists students;'
[void] $sql.ExecuteNonQuery()

$sql = $con.CreateCommand()
$sql.CommandText = 'DROP table if exists classes;'
[void] $sql.ExecuteNonQuery()

$sql.CommandText = 'CREATE table classes   
   (id text, subjcode text, coursenumber text, termcode text);'
[void]$sql.ExecuteNonQuery()

$sql = $con.CreateCommand()
$sql.CommandText = 'CREATE table students (id text primary key unique,  lastname text, firstname text, major text,    email text, city text, state text, zip text);'
[void] $sql.ExecuteNonQuery()

[void] $transaction.Commit()

#$s = $row.course.split(" ")
foreach ($row in $csv) {

   $s = $row.course.split(" ")
  
  
  $transaction = $con.BeginTransaction("addclassestransaction") 
  $sql.CommandText = "INSERT or REPLACE into classes (id,subjcode,coursenumber,termcode) VALUES(@id,@subjcode,@coursenumber,@termcode);"
  [void]$sql.Parameters.AddWithValue("@id", $row.wnumber)
  [void]$sql.Parameters.AddWithValue("@subjcode", $s[0])
  [void]$sql.Parameters.AddWithValue("@coursenumber", $s[1])
  [void]$sql.Parameters.AddWithValue("@termcode", $row.termcode)
  
  [void]$sql.ExecuteNonQuery() 
  
  [void]$transaction.Commit()
     
  }

$transaction = $con.BeginTransaction("addstudenttransaction") 
$sql.CommandText = "INSERT or REPLACE into students   (id,firstname,lastname,email,major,city,state,zip) values    (@id,@firstname,@lastname,@email,@major,@city,@state,@zip);"
[void]$sql.Parameters.AddWithValue("@id", $row.wnumber) 
[void]$sql.Parameters.AddWithValue("@firstname", $row.firstname)
[void]$sql.Parameters.AddWithValue("@lastname", $row.lastname)
[void]$sql.Parameters.AddWithValue("@email", $row.email)
[void]$sql.Parameters.AddWithValue("@major", $row.major)
[void]$sql.Parameters.AddWithValue("@city", $row.city)
[void]$sql.Parameters.AddWithValue("@state", $row.state)
[void]$sql.Parameters.AddWithValue("@zip", $row.zip)

#$s = $row.course.split(" ")

[void]$sql.ExecuteNonQuery() 

[void]$transaction.Commit()


exit(0)





lab 9 -- powershell filmarker -- 140/300

#!/usr/bin/env pwsh
#Erika Hernandez
#Lab 9 - PowerShell Filemaker
#CS 3030 - Scripting Languages 

if ($args.length -ne 3) {
    write-output ("Usage: ./filemaker.ps1 INPUTCOMMANDFILE OUTPUTFILE RECORDCOUNT")
    exit 1
}

try {
    $inputCommands = Get-Content -path $args[0] -erroraction stop
}
catch {
    write-output ("Error opening or reading command file: $($_)")
    exit 1
}

try {
    $outputFile = $args[1]
    New-Item -path $outputFile -erroraction stop | out-null
}
catch {
    write-output ("Error opening output file: $($_)")
    exit 1
}

 
function writeToFile ($outputFile, $outputString) {
    $outputString = $outputString -replace [regex]::escape("\t"), "`t"
    $outputString = $outputString -replace [regex]::escape("\n"), "`n"
    
    try {
        add-content -path $outputFile -value $outputString -nonewline
    }
    catch {
        write-output "Write failed to file $($outputFile): $_"
        exit 1
    }

}
foreach ($command in $inputCommands ) {
    if ($command -match '^HEADER\s+"(.*)"$') {
        writeToFile $outputFile $matches.1
    }
    
    if ($command -match '^STRING\s+"(.*)"$' -or $command -match "^STRING\s+'(.*)'$" ) {
        writeToFile $outputFile $matches.1
    }
       
    if ($command -match '^FILEWORD\s+(.*)\s+"(.*)"$') {
        $command = $command.Split(" ")
        $commandTrim = $command[2].Trim('"')
        $commandFileContent = Get-Content $commandTrim 
        $randomWord = Get-Random -InputObject $commandFileContent 
        add-content -path $outputFile -value $randomWord -nonewline
        if ($command[1] -eq "firstname" ) {
            $randomFirst = $randomWord

        }
        if ($command[1] -eq "lastname" ) {
            $randomLast = $randomWord
            
        }
        #    writeToFile $outputFile $matches.1
        #    writeToFile $outputFile $matches.2
    }
    
    # $randomWord = Get-Random -inputobject $arrayVariable {
    #     $randomNumber = Get-Random -min $numberMin -max $numberMax
    # }

    if ($command -match '^NUMBER\s+(\w+)\s+(\d+)\s+(\d+)$') {
        $command = $command.Split(" ")
        $numberMin = $($matches.2).toInt32($null)
        $numberMax = $($matches.3).toInt32($null)
        $randomNumber = Get-Random -min $numberMin -max $numberMax
        if ($command[1] -eq "num" ) {
            $randomNum = $randomNumber
            
        }
       writeToFile $outputFile $randomNumber
        
    }
    
    if ($command -match '^REFER\s+(\w+)$' ) {
        $command = $command.Split(" ")
        if ($command[1] -eq "firstname" ) {
            writeToFile $outputFile $randomFirst
        }

        if ($command[1] -eq "lastname" ) {
            writeToFile $outputFile $randomLast
        }
         
        if ($command[1] -eq "num" ) {
            writeToFile $outputFile $randomNum
        }
        
    }
}
   


exit (0)















